# -*-coding:utf-8-*-
# !/data1/Python2.7/bin/python2.7
# date: 2020/1/16 16:57
# user: Administrator
# description: 常见的运算符与表达式
#


# 运算符与表达式

#   +     -   *    /    %    **    //       =
#   加   减   乘    除   余   幂    除取整    赋值
#

# 复合运算符
# +=    -=      *=      /=      //=     %=

# 复合运算符和上面的运算符是一致的

# 逻辑运算符
#   位运算符：二进制按位进行运算
#       &: 相对应的位数为1，则为1；否则为0；
#       |：对应的位数存在1  则为1；否则为0；
#       ^: 按位异或 运算符，表示按位不同是为1，否则为0；
#       ~：表示按位取反运算符；
#       <<：二进制位数向左移动一定的位数
#       >>：二进制位数向右移动一定的位数
#

def Calculated_value():
    print 5 & 7, 101 & 111, 1111111 & 10011011
    print ~122, 13 << 2, 34 >> 2


# 关系运算符与关系运算表达式
# ==    !=  >   <   >=  <=
# 计算表达式1 和 表达式2 的值，并且按照关系运算符进行比较
# 如果计算出来的结果成立为 True，否则为False
#
# 逻辑运算符
#   and:
#       expr1 and expr2
#           expr1为真，expr2为真表达式为真
#   or:
#       expr1 or expr2
#           expr 存在为真为真
#   not:
#       not expr1
#
#


def and_or_not():
    if 1 and 2:
        print True

    if 1 or 0:
        print True

    if not 0:
        print True


# 成员运算符
#   in：如果在序列中找到指定的值，返回True，否则返回False
#   not in：与上面相反

# 身份运算符
#   is：判断两个标识符是否引用相同的对象
#   not is：判断连个标识符是不是引用不同的对象

# 运算符优先级
#          **
#         ~ + -
#       * / % //
#         + -
#        << >>
#          &
#       <= < > >=
#      =  +=   -=
#      is  is not
#       in not in
# 短路原则：
#   首先判断第一个表达式，如果第一个表达式可以得到，就不在判断后面的语句


def main():
    and_or_not()


if __name__ == '__main__':
    main()
